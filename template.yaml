AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge

  Sample SAM Template for cloud-resume-challenge

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:

# s3 bucket
  Mywebsite:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: my-fantanstic-website 

  # Dynamodb
  DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"


  #Route53 DNS
  MyRoute53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      HostedZoneId: Z02249571L3EN5RTX0NIM
      RecordSets:
          - Name: wilmomartinez.com
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: !GetAtt MyDistribution.DomainName

  #SSL Certificate
  Mycertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: wilmomartinez.com
      ValidationMethod: DNS

# Cloudfron distribution 

  MyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
            ViewerProtocolPolicy: allow-all
            TargetOriginId: my-fantanstic-website.s3.us-east-1.amazonaws.com
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0         
            ForwardedValues:
              QueryString: false
            LambdaFunctionAssociations:
              - EventType: viewer-response
                LambdaFunctionARN: !GetAtt lambdaSecurityHeaders
        ViewerCertificate:
            AcmCertificateArn: !Ref Mycertificate
            SslSupportMethod: sni-only
        Aliases:
          - wilmomartinez.com
        Origins:
        - DomainName: my-fantanstic-website.s3.us-east-1.amazonaws.com
          Id: my-fantanstic-website.s3.us-east-1.amazonaws.com
          CustomOriginConfig:
            OriginProtocolPolicy: match-viewer          
        Enabled: 'true'
        DefaultRootObject: index.html 
  
        

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Mywebsite
                - /*
      Bucket: !Ref Mywebsite

# Lambda funtion
  WebVisitorCounterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/backend/lambda/
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Events:
        ApiGatewayEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /update-web-visit
            Method: GET
      Role: !GetAtt LambdaExecutionRole.Arn
      

  LambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: UpdateWebVisitCounterRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: DynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:UpdateItem'
                    - 'dynamodb:GetItem'
                  Resource: !GetAtt DynamoDBTable.Arn

# Lambda@Edge security Headers
  lambdaSecurityHeaders:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/backend/lambda_security-headers
      Handler: index.handler
      Runtime: node.js18.x
      Architectures:
        - x86_64

      Role: !GetAtt LambdaExecutionRole.Arn


# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
